// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ORGANIZER
  ADMIN
  SUPERADMIN
}

enum TicketStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  role            Role      @default(USER)
  roleRequest     RoleRequest?
  Event           Event[]   @relation("OrganizerEvents")
  tickets         Ticket[]
  refreshTokens   RefreshToken[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model RefreshToken {
  id              String      @id @default(uuid())
  tokenHash       String      @unique
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  revoked         Boolean     @default(false)
  revokedAt       DateTime?
  replacedBy      String?
  expiresAt       DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Event {
  id              String  @id @default(uuid())
  title           String
  description     String
  location        String
  date            DateTime
  capacity        Int

  organizer       User    @relation("OrganizerEvents", fields: [organizerId], references: [id])
  organizerId     String

  categoryId      String
  category        EventCategory @relation(fields: [categoryId], references: [id])

  tickets         Ticket[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model RoleRequest {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model EventCategory {
  id            String      @id @default(uuid())
  name          String      @unique
  description   String?
  status        Boolean     @default(true)
  events        Event[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Ticket {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  event     Event         @relation(fields: [eventId], references: [id])
  eventId   String
  status    TicketStatus  @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}